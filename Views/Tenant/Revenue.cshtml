@using System.Text.RegularExpressions
@model IEnumerable<MonthlyRevenueViewModel>


<h2>View Revenue Data</h2>

<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
    <div></div> <!-- Spacer for alignment -->
    <div>
        <strong>Total Revenue: ₹ @FormatAsIndianCurrency(Model.Sum(revenue => revenue.TotalRevenue))</strong>
    </div>
</div>

@if (!Model.Any())
{
    <p>No data available.</p>
}
else
{
    <table style="width: 100%; border-collapse: collapse; margin-top: 20px; border: 1px solid #ddd;">
        <thead style="background-color: #f2f2f2;">
            <tr>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #ddd;">Year</th>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #ddd;">Month</th>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #ddd;">Revenue (₹)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var revenue in Model)
            {
                <tr style="border-bottom: 1px solid #ddd;">
                    <td style="padding: 8px;">@revenue.Year</td>
                    <td style="padding: 8px;">
                        @{
                            string monthName = new DateTime(revenue.Year, revenue.Month, 1).ToString("MMMM");
                        }
                        @monthName
                    </td>
                    <td style="padding: 8px;">₹ @FormatAsIndianCurrency(revenue.TotalRevenue)</td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {
    // Method to format currency as per Indian numbering system
    private string FormatAsIndianCurrency(decimal amount)
    {
        // Convert the amount to string and then split it into the integer and decimal parts
        string amountString = Math.Round(amount, 2).ToString("F2");
        string[] parts = amountString.Split('.');
        string integerPart = parts[0];
        string decimalPart = parts[1];

        // Format the integer part in the Indian numbering system
        if (integerPart.Length > 3)
        {
            int lastThreeDigitsIndex = integerPart.Length - 3;
            string lastThreeDigits = integerPart.Substring(lastThreeDigitsIndex);
            string restOfTheNumber = integerPart.Substring(0, lastThreeDigitsIndex);

            // Add commas in the rest of the number in the Indian format
            restOfTheNumber = Regex.Replace(restOfTheNumber, "(?<=\\d)(?=(\\d{2})+$)", ",");

            integerPart = restOfTheNumber + "," + lastThreeDigits;
        }

        return integerPart + "." + decimalPart;
    }
}
