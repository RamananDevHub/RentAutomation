@model IEnumerable<MonthlyRevenueViewModel>

<h2>View Revenue Data</h2>

@if (!Model.Any())
{
    <p>No data available.</p>
}
else
{
    <table style="width: 100%; border-collapse: collapse; margin-top: 20px; border: 1px solid #ddd;">
        <thead style="background-color: #f2f2f2;">
            <tr>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #ddd;">Year</th>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #ddd;">Month</th>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #ddd;">Total Revenue (₹)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var revenue in Model)
            {
                <tr style="border-bottom: 1px solid #ddd;">
                    <td style="padding: 8px;">@revenue.Year</td>
                    <td style="padding: 8px;">
                        @{
                            string monthName = new DateTime(revenue.Year, revenue.Month, 1).ToString("MMMM");
                        }
                        @monthName
                    </td>
                    <td style="padding: 8px;">₹ @FormatAsIndianCurrency(revenue.TotalRevenue)</td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {
    // Method to format currency as per Indian numbering system
    private string FormatAsIndianCurrency(decimal amount)
    {
        // Convert the amount to a long
        long value = Convert.ToInt64(amount);

        // Format the value with space as thousands separator
        string result = value.ToString("#,0").Replace(",", " "); // Replace comma with space

        // To handle the placement of commas for lakhs and crores
        if (value >= 100000)
        {
            // Insert comma before the last 3 digits for Indian numbering
            int length = result.Length;
            result = result.Insert(length - 3, ",");
        }

        return result;
    }
}
